{"version":3,"file":"admin.js","mappings":"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EA;;IAEA6C,aAAa,CAACiF,OAAO,CAAE5H,MAAM,IAAK;MAE9BoC,MAAM,CAAC+E,OAAO,CAACY,QAAQ,CAAC/H,MAAM,CAAC;IAEnC,CAAC,CAAC;EAEN,CAAC,EAAE,CAAC2C,aAAa,CAAC,CAAC;;EAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwDA;;;;;;;;;;AC7vBA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNuC;AACc;AAErD,MAAMqF,YAAY,GAAGhF,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC;AACjE,MAAMgF,OAAO,GAAGjG,qDAAU,CAACgG,YAAY,CAAC;AACxCC,OAAO,CAACN,MAAM,CAAC/G,oDAAA,CAACuB,gEAAY,MAAE,CAAC,CAAC,C","sources":["webpack://vos-territory-map/./src/components/CountyCard.js","webpack://vos-territory-map/./src/components/StateSelector.js","webpack://vos-territory-map/./src/components/TerritoryMap.js","webpack://vos-territory-map/external window \"React\"","webpack://vos-territory-map/external window \"ReactDOM\"","webpack://vos-territory-map/external window [\"wp\",\"components\"]","webpack://vos-territory-map/external window [\"wp\",\"element\"]","webpack://vos-territory-map/webpack/bootstrap","webpack://vos-territory-map/webpack/runtime/compat get default export","webpack://vos-territory-map/webpack/runtime/define property getters","webpack://vos-territory-map/webpack/runtime/hasOwnProperty shorthand","webpack://vos-territory-map/webpack/runtime/make namespace object","webpack://vos-territory-map/./src/admin.js"],"sourcesContent":["import {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    __experimentalHeading as Heading,\r\n    __experimentalText as Text,\r\n    ToggleControl,\r\n    SelectControl\r\n} from '@wordpress/components';\r\n\r\nimport { useState } from '@wordpress/element';\r\n\r\nimport branches from '../assets/branches.json';\r\nimport fips from '../assets/fips.json';\r\n\r\nexport default function CountyCard({ countySelection, updateCountySelection }) {\r\n\r\n    const countiesAreActive = (counties) => {\r\n\r\n        if (counties.length) {\r\n\r\n            return counties.every((county) => county.active);\r\n\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const getCountiesBranch = (counties) => {\r\n\r\n        // if counties.length is truthy, and all counties have the same branch, return that branch\r\n        // otherwise, return 'default'\r\n\r\n        if (counties.length && counties.every((county) => county.branch === counties[0].branch)) {\r\n\r\n            return counties[0].branch;\r\n\r\n        }\r\n\r\n        return '';\r\n\r\n    };\r\n\r\n    const [active, setActive] = useState(countiesAreActive(countySelection));\r\n    const [branch, setBranch] = useState(getCountiesBranch(countySelection));    \r\n\r\n    const handleToggleChange = (isActive) => {\r\n\r\n        setActive(isActive);\r\n\r\n        updateCountySelection((prevCountySelection) => {\r\n                \r\n            return prevCountySelection.map((county) => {\r\n\r\n                return {\r\n                    ...county,\r\n                    active: isActive,\r\n                };\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    const handleBranchChange = (value) => {\r\n\r\n        setBranch(value);\r\n\r\n        updateCountySelection((prevCountySelection) => {\r\n                \r\n            return prevCountySelection.map((county) => {\r\n\r\n                return {\r\n                    ...county,\r\n                    branch: value\r\n                };\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                {\r\n                    countySelection.length ? \r\n                        (\r\n                            countySelection.map((county) => (\r\n                                <Heading key={county.properties.GEOID} level={2}>{county.properties.Name} County</Heading>\r\n                            ))\r\n                        ) : (\r\n                            <Heading level={2}>Select A County</Heading>\r\n                        )\r\n                }\r\n            </CardHeader>\r\n            <CardBody>\r\n                <ToggleControl\r\n                    label=\"Activate County\"\r\n                    checked={active}\r\n                    onChange={handleToggleChange}\r\n                />\r\n                <SelectControl\r\n                    label=\"Select Branch\"\r\n                    disabled={!active}\r\n                    value={branch}\r\n                    options={branches}\r\n                    onChange={handleBranchChange}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n\r\n}","import {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    ToggleControl,\r\n    __experimentalHeading as Heading\r\n} from '@wordpress/components';\r\n\r\nimport fips from '../assets/fips.json';\r\n\r\nexport default function StateSelector({ states, updateStates }) {\r\n\r\n   \r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <Heading level={2}>States</Heading>\r\n            </CardHeader>\r\n            <CardBody>\r\n                {fips.map((state) => (\r\n                    <ToggleControl\r\n                        key={state.fips}\r\n                        label={state.name}\r\n                        checked={states.includes(state)}\r\n                        onChange={(checked) => {\r\n                            \r\n                            if (checked) {\r\n\r\n                                updateStates((prevStates) => [...prevStates, state]);\r\n\r\n                            } else {\r\n\r\n                                updateStates((prevStates) => prevStates.filter((prevState) => prevState.fips !== state.fips));\r\n\r\n                            }\r\n                            \r\n                        }}\r\n                    />\r\n                ))}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}","/**\r\n * External dependencies\r\n */\r\nimport { createRoot } from 'react-dom';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n    useState,\r\n    useEffect,\r\n    useRef,\r\n} from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport StateSelector from './StateSelector';\r\nimport CountyCard from './CountyCard';\r\nimport fips from '../assets/fips.json';\r\nimport branches from '../assets/branches.json';\r\n\r\nexport default function TerritoryMap() {\r\n\r\n    /**\r\n     * Unused variables\r\n     * \r\n     * const [clickedState, setClickedState] = useState({});\r\n     * const [counties, setCounties] = useState(admin.counties !== '' ? admin.counties : []);\r\n     * const [clickedCounty, setClickedCounty] = useState({});\r\n     * \r\n     */\r\n\r\n    const mapRef = useRef();\r\n\r\n    const [stateData, setStateData] = useState({});\r\n\r\n    \r\n    const [states, setStates] = useState(admin.states !== '' ? admin.states : []);\r\n    const [stateShapes, setStateShapes] = useState([]);    \r\n    const [stateCounties, setStateCounties] = useState([]);\r\n    const [selectedCounties, setSelectedCounties] = useState([]);\r\n    \r\n    const stateSelectorRoot = createRoot(document.getElementById('state-selector'));\r\n    const countyCardRoot = createRoot(document.getElementById('county-card'));\r\n\r\n    const updateCountySelection = (county) => {\r\n\r\n        console.log(\"Clicked county GEOID:\", county.properties.GEOID);\r\n        console.log(\"Current countySelection:\", countySelection);\r\n        \r\n        const countyId = county.properties.GEOID;\r\n    \r\n        // Check if the county is already in the selection\r\n        const countyIsInSelection = countySelection.some(c => c.properties.GEOID === countyId);\r\n    \r\n        // Update the selection: remove if present, add if not\r\n        setCountySelection(prevSelection => \r\n            countyIsInSelection\r\n                ? prevSelection.filter(c => c.properties.GEOID !== countyId) // Deselect the county\r\n                : [...prevSelection, county] // Select the county\r\n        );       \r\n\r\n    }\r\n\r\n    /*\r\n    const getStateData = (stateFips) => {\r\n\r\n        const apiRoute = admin.apiBase + '/state/' + stateFips;\r\n\r\n        var stateData = [];\r\n\r\n        fetch(apiRoute)\r\n        .then(response => {\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            return response.json();\r\n\r\n        })\r\n        .then(stateJson => {\r\n\r\n            const stateData = turf.combine(stateJson);\r\n            const stateBorder = turf.convex(\r\n                stateData,\r\n                {\r\n                    concavity: 1\r\n                }\r\n            );\r\n\r\n            const stateShape = L.geoJSON(\r\n                stateBorder,\r\n                {\r\n                    style: {\r\n                        color: '#0a1944',\r\n                        weight: 2,\r\n                        opacity: 1,\r\n                        fillColor: 'transparent',\r\n                        fillOpacity: 0,\r\n                    },\r\n                    state: stateFips\r\n                }\r\n            );\r\n\r\n            const stateCounties = L.geoJSON(\r\n                stateJson,\r\n                {\r\n                    onEachFeature: (feature, layer) => {\r\n\r\n                        layer.setStyle({\r\n                            color: '#0a1944',\r\n                            weight: 1,\r\n                            opacity: .5,\r\n                            fillColor: 'transparent',\r\n                            fillOpacity: 0,\r\n                        });\r\n\r\n                    }\r\n                }\r\n            );\r\n\r\n            stateData.push(stateShape);\r\n            stateData.push(stateCounties);\r\n\r\n        })\r\n        .catch(error => {\r\n\r\n            console.error('There has been a problem with your fetch operation:', error);\r\n\r\n        });\r\n\r\n        return stateData;\r\n\r\n    }\r\n    */\r\n\r\n    const addSingleState = (stateToAdd) => {\r\n\r\n        const stateApi = admin.apiBase + '/state/' + stateToAdd;\r\n\r\n        console.log(\"going to check stateApi\", stateApi);\r\n        fetch(stateApi)\r\n            .then(response => {\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n\r\n                return response.json();\r\n\r\n            })\r\n            .then(stateJson => {\r\n\r\n                console.log(\"success, stateJson\", stateJson);\r\n                var stateData = turf.combine(stateJson);\r\n\r\n                var layerShape = turf.convex(\r\n                    stateData,\r\n                    {\r\n                        concavity: 1\r\n                    }\r\n                );\r\n\r\n                // stateShape is a layerGroup with a single layer that is the state shape\r\n                const stateShape = L.geoJSON(\r\n                    layerShape,\r\n                    {\r\n                        style: {\r\n                            color: '#0a1944',\r\n                            weight: 2,\r\n                            opacity: 1,\r\n                            fillColor: 'transparent',\r\n                            fillOpacity: 0,\r\n                        },\r\n                        fips: stateToAdd\r\n                    },\r\n                );\r\n\r\n                // stateCounties is a layerGroup with a layer for each county in the state\r\n                const stateCounties = L.geoJSON(\r\n                    stateJson,\r\n                    {\r\n                        onEachFeature: (feature, layer) => {\r\n\r\n                            layer.setStyle({\r\n                                color: '#0a1944',\r\n                                weight: 1,\r\n                                opacity: .5,\r\n                                fillColor: 'transparent',\r\n                                fillOpacity: 0,\r\n                            });\r\n\r\n                            const stateName = fips.filter((state) => state.fips === feature.properties.STATEFP)[0].name;\r\n\r\n                            layer.bindTooltip(\r\n                                feature.properties.Name + ' County, ' + stateName,\r\n                                {\r\n                                    interactive: true\r\n                                }\r\n                            );\r\n\r\n                            layer.on('click', () => {\r\n\r\n                                setClickedCounty(feature);\r\n\r\n                            });\r\n    \r\n                        },\r\n                        state: stateToAdd\r\n                    }\r\n                );\r\n\r\n                // add stateShape to stateLayerGroups array\r\n                // add stateCounties to countyLayerGroups array\r\n\r\n                setStateLayerGroups((prevGroups) => [...prevGroups, stateShape]);\r\n                setCountyLayerGroups((prevGroups) => [...prevGroups, stateCounties]);\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                console.error('There has been a problem with your fetch operation:', error);\r\n\r\n            });\r\n\r\n    }\r\n\r\n    const removeSingleState = (stateToRemove) => {\r\n\r\n        console.log(\"stateToRemove\", stateToRemove);\r\n        console.log(\"countyLayers\", countyLayers.getLayers());\r\n        console.log(\"stateLayers\", stateLayers.getLayers());\r\n\r\n        const stateFips = stateToRemove.options.fips;\r\n\r\n        const stateLayerToRemove = stateLayers.getLayers().filter((layer) => layer.options.fips === stateFips)[0];\r\n\r\n        const countiesLayerToRemove = countyLayers.getLayers().filter((layer) => layer.options.state === stateFips)[0];\r\n\r\n        // remove state shape\r\n        stateLayers.removeLayer(stateLayerToRemove);\r\n\r\n        // remove state counties\r\n        countyLayers.removeLayer(countiesLayerToRemove);        \r\n\r\n    }\r\n\r\n    /**\r\n         * const function to get state data object\r\n         */\r\n    const processState = (stateFips, operation = 'add' ) => {\r\n\r\n        //const [stateData, setStateData] = useState({});\r\n\r\n        //var stateData = {};\r\n\r\n        if (operation === 'remove') {\r\n\r\n            console.log(\"stateFips\", stateFips);\r\n            console.log(\"stateShapes\", stateShapes);\r\n            console.log(\"stateCounties\", stateCounties);\r\n\r\n            const stateShapeToRemove = stateShapes.filter((shape) => shape.options.fips === stateFips)[0];\r\n            const stateCountiesToRemove = stateCounties.filter((counties) => counties.options.fips === stateFips)[0];\r\n\r\n            console.log(\"stateShapeToRemove\", stateShapeToRemove);\r\n            console.log(\"stateCountiesToRemove\", stateCountiesToRemove);\r\n\r\n            setStateShapes((prevShapes) => prevShapes.filter((shape) => shape.options.fips !== stateFips));\r\n            setStateCounties((prevCounties) => prevCounties.filter((counties) => counties.options.fips !== stateFips));\r\n\r\n            mapRef.current.removeLayer(stateShapeToRemove);\r\n            mapRef.current.removeLayer(stateCountiesToRemove);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        const apiRoute = admin.apiBase + '/state/' + stateFips;\r\n        console.log(\"apiRoute\", apiRoute);\r\n\r\n        fetch(apiRoute)\r\n        .then(response => {\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            return response.json();\r\n\r\n        })\r\n        .then(stateJson => {\r\n\r\n            const stateData = turf.combine(stateJson);\r\n\r\n            const stateShape = turf.convex(\r\n                stateData,\r\n                {\r\n                    concavity: 1\r\n                }\r\n            );\r\n\r\n            const stateCounties = stateJson;\r\n\r\n            //stateData.shape = stateShape;\r\n            //stateData.counties = stateCounties;\r\n\r\n            setStateData({\r\n                shape: stateShape,\r\n                counties: stateCounties,\r\n                fips: stateFips\r\n            });\r\n\r\n        })\r\n        .catch(error => {\r\n\r\n            console.error('There has been a problem with your fetch operation:', error);\r\n\r\n        });\r\n\r\n        //console.log(\"stateData inside\", stateData);\r\n\r\n        //return stateData;\r\n\r\n    }\r\n\r\n    /**\r\n     * const function to update selectedCounties\r\n     */\r\n    const updateSelectedCounties = (county) => {\r\n\r\n        setSelectedCounties((prevCounties) => {\r\n\r\n            const isSelected = prevCounties.includes(county);\r\n\r\n            if (isSelected) {\r\n\r\n                return prevCounties.filter((prevCounty) => prevCounty !== county);\r\n\r\n            } else {\r\n\r\n                return [...prevCounties, county];\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    \r\n    /**\r\n     * Stage 1\r\n     * initialize map\r\n     * \r\n     * no dependencies\r\n     */\r\n    useEffect(() => {\r\n\r\n        console.log(\"map initialized\");\r\n\r\n        mapRef.current = L.map(\r\n            'afc-territory-map',\r\n            {\r\n                center: [39.8283, -98.5795],\r\n                zoom: 4,\r\n                zoomControl: false,\r\n            }\r\n        );\r\n        \r\n    }, []);\r\n\r\n    /**\r\n     * Stage 2\r\n     * add state selector\r\n     * \r\n     * dependencies: states\r\n     */\r\n    useEffect(() => {\r\n\r\n        console.log(\"states hooked\", states);        \r\n        \r\n        stateSelectorRoot.render(<StateSelector states={states} updateStates={setStates} />);\r\n  \r\n        if (states.length === 0) {\r\n\r\n            console.log(\"states is empty\")\r\n\r\n            if (stateShapes.length === 0) {\r\n\r\n                \r\n\r\n                return;\r\n\r\n            }\r\n\r\n            stateShapes.forEach((shape) => {\r\n\r\n                console.log(\"removing shape\", shape);\r\n\r\n                mapRef.current.removeLayer(shape);\r\n\r\n            });\r\n\r\n            console.log(\"current mapRef\", mapRef.current)\r\n\r\n            setStateShapes([]);\r\n\r\n            if (stateCounties.length === 0) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            stateCounties.forEach((counties) => {\r\n\r\n                mapRef.current.removeLayer(counties);\r\n\r\n            });\r\n\r\n            setStateCounties([]);\r\n\r\n        }\r\n\r\n        // check if states need to be added\r\n        states.forEach((state) => {\r\n\r\n            if (stateShapes.length === 0) {\r\n\r\n                processState(state.fips);\r\n\r\n            } else {\r\n\r\n                const stateOnMap = stateShapes.includes((shape) => shape.options.fips === state.fips);\r\n\r\n                if (stateOnMap) {\r\n\r\n                    return;\r\n\r\n                } else {\r\n\r\n                    processState(state.fips);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // check if states need to be removed\r\n        stateShapes.forEach((shape) => {\r\n\r\n            if (states.length === 0) {\r\n\r\n                return;\r\n\r\n            } \r\n\r\n            // shapeNotSelected is true if shape is not in states\r\n            const shapeNotSelected = states.every((state) => state.fips !== shape.options.fips);\r\n\r\n            if (shapeNotSelected) {\r\n\r\n                processState(shape.options.fips, 'remove');\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n    }, [states]);\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(\"stateData hooked\", stateData);\r\n\r\n        const stateShape = L.geoJSON(\r\n            stateData.shape,\r\n            {\r\n                style: {\r\n                    color: '#0a1944',\r\n                    weight: 2,\r\n                    opacity: 1,\r\n                    fillColor: 'transparent',\r\n                    fillOpacity: 0,\r\n                },\r\n                fips: stateData.fips\r\n            },\r\n        );\r\n\r\n        const stateCounties = L.geoJSON(\r\n            stateData.counties,\r\n            {\r\n                onEachFeature: (feature, layer) => {\r\n\r\n                    layer.setStyle({\r\n                        color: '#0a1944',\r\n                        weight: 1,\r\n                        opacity: .5,\r\n                        fillColor: 'transparent',\r\n                        fillOpacity: 0,\r\n                    });\r\n\r\n                    layer.on('click', () => {\r\n\r\n                        updateSelectedCounties(feature);\r\n\r\n                    });\r\n\r\n                },\r\n                fips: stateData.fips\r\n            },\r\n        );\r\n\r\n        setStateShapes((prevShapes) => [...prevShapes, stateShape]);\r\n        setStateCounties((prevCounties) => [...prevCounties, stateCounties]);\r\n\r\n    }, [stateData]);\r\n\r\n    /**\r\n     * Stage 3\r\n     * add county card\r\n     * \r\n     * dependencies: selectedCounties\r\n     */\r\n    useEffect(() => {\r\n\r\n        console.log(\"selectedCounties hooked\", selectedCounties);\r\n\r\n        countyCardRoot.render(<CountyCard countySelection={selectedCounties} updateCountySelection={setSelectedCounties} />);\r\n\r\n    }, [selectedCounties]);\r\n    \r\n    /**\r\n     * Stage 4\r\n     * add state layers\r\n     * \r\n     * dependencies: stateShapes\r\n     */\r\n    useEffect(() => {\r\n\r\n        console.log(\"stateShapes hooked\", stateShapes);\r\n\r\n        // if stateLayerGroups is empty, return\r\n\r\n        if (stateShapes.length === 0) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // add state layers to mapRef.current\r\n\r\n        stateShapes.forEach((shape) => {\r\n\r\n            mapRef.current.addLayer(shape);\r\n\r\n        });\r\n\r\n    }, [stateShapes]);\r\n\r\n    /**\r\n     * Stage 5\r\n     * add county layers\r\n     * \r\n     * dependencies: stateCounties\r\n     */\r\n    useEffect(() => {\r\n\r\n        console.log(\"stateCounties hooked\", stateCounties)\r\n\r\n        // if countyLayerGroups is empty, return\r\n\r\n        if (stateCounties.length === 0) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // add county layers to mapRef.current\r\n\r\n        stateCounties.forEach((county) => {\r\n\r\n            mapRef.current.addLayer(county);\r\n\r\n        });\r\n\r\n    }, [stateCounties]);\r\n\r\n    /*\r\n    // useEffect for states\r\n    // this hook is triggered when selected states is updated\r\n    useEffect(() => {\r\n        \r\n        stateSelectorRoot.render(<StateSelector states={states} updateStates={setStates} />);\r\n\r\n        // if states is empty, return\r\n        // else add or remove state from stateLayers\r\n\r\n        if (states.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // iterate through states\r\n        states.forEach((state) => {\r\n\r\n            if(stateLayerGroups.length === 0) {\r\n\r\n                //console.log(\"stateLayerGroups is empty: adding state\", state.name);\r\n                //addSingleState(state.fips);\r\n                const stateData = getStateData(state.fips);\r\n                console.log(\"stateData\", stateData);\r\n\r\n            }\r\n\r\n            console.log(\"state outside if\", state);\r\n            console.log(\"state layer groups\", stateLayerGroups);\r\n            // check if each state is in stateLayerGroups\r\n            if (!stateLayerGroups.some((group) => group.options.state === state.fips)) {\r\n\r\n                console.log(\"add triggered for \" + state.name);\r\n                // if not, add the state\r\n                //console.log(\"remove \" + state.name);\r\n                addSingleState(state.fips);\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // iterate through stateLayerGroups\r\n        stateLayerGroups.forEach((group) => {\r\n\r\n            // check if each stateLayerGroup is in states\r\n            if (!states.some((state) => state.fips === group.options.state)) {\r\n\r\n                console.log(\"remove triggered for \" + group.options.state);\r\n                console.log(\"state\", state);\r\n                console.log(\"group\", group);\r\n                // if not, remove the state\r\n                removeSingleState(group);\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }, [states]);\r\n\r\n    // useEffect for stateLayerGroups\r\n    useEffect(() => {\r\n\r\n        // if stateLayerGroups is empty, return\r\n        // else add stateLayerGroups to mapRef.current\r\n\r\n        if (stateLayerGroups.length === 0) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // iterate through stateLayerGroups\r\n        stateLayerGroups.forEach((stateGroup) => {\r\n\r\n            // check if each stateLayerGroup is in mapRef.current\r\n            if (!mapRef.current.hasLayer(stateGroup)) {\r\n\r\n                // if not, add the stateLayerGroup\r\n                mapRef.current.addLayer(stateGroup);\r\n\r\n                // then add the countyLayerGroup\r\n                //console.log(\"countyGroup\", countyGroup);\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n    }, [stateLayerGroups]);\r\n\r\n    // useEffect for countyLayerGroups\r\n    useEffect(() => {\r\n\r\n        // if countyLayerGroups is empty, return\r\n        // else add countyLayerGroups to mapRef.current\r\n\r\n        if (countyLayerGroups.length === 0) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // iterate through countyLayerGroups\r\n        countyLayerGroups.forEach((countyGroup) => {\r\n\r\n            // check if each countyLayerGroup is in mapRef.current\r\n            if (!mapRef.current.hasLayer(countyGroup)) {\r\n\r\n                // if not, add the countyLayerGroup\r\n                mapRef.current.addLayer(countyGroup);\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }, [countyLayerGroups]);\r\n\r\n    \r\n    // useEffect for countySelection\r\n    useEffect(() => {\r\n        \r\n        countyCardRoot.render(<CountyCard countySelection={countySelection} updateCountySelection={setCountySelection} />);\r\n\r\n    }, [countySelection]);\r\n\r\n    // useEffect for clickedCounty\r\n    useEffect(() => {\r\n\r\n        // if clickedCounty is empty, return\r\n        if (Object.keys(clickedCounty).length === 0) {\r\n            return;\r\n        }\r\n        \r\n        console.log(\"Clicked county GEOID:\", clickedCounty.properties.GEOID);\r\n        console.log(\"Current countySelection:\", countySelection);\r\n        \r\n        const countyId = clickedCounty.properties.GEOID;\r\n    \r\n        // Check if the county is already in the selection\r\n        const countyIsInSelection = countySelection.some(c => c.properties.GEOID === countyId);\r\n    \r\n        // Update the selection: remove if present, add if not\r\n        setCountySelection(prevSelection => \r\n            countyIsInSelection\r\n                ? prevSelection.filter(c => c.properties.GEOID !== countyId) // Deselect the county\r\n                : [...prevSelection, clickedCounty] // Select the county\r\n        );  \r\n        \r\n    }, [clickedCounty]);\r\n\r\n    useEffect(() => {\r\n        \r\n        // if clickedState is empty, return\r\n        if (Object.keys(clickedState).length === 0) {\r\n            return;\r\n        }\r\n\r\n        console.log(\"clickedState\", clickedState);\r\n\r\n        if (clickedState.active) {\r\n\r\n            console.log(\"clickedState is active\");\r\n\r\n            // add state to states\r\n            setStates((prevStates) => [...prevStates, clickedState]);\r\n\r\n        } else {\r\n\r\n            console.log(\"clickedState is not active\");\r\n\r\n        }\r\n\r\n        // if clickedState is in\r\n\r\n    }, [clickedState]);\r\n    */\r\n\r\n}","module.exports = window[\"React\"];","module.exports = window[\"ReactDOM\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { createRoot } from 'react-dom';\r\nimport TerritoryMap from './components/TerritoryMap';\r\n\r\nconst mapContainer = document.getElementById('afc-territory-map');\r\nconst mapRoot = createRoot(mapContainer);\r\nmapRoot.render(<TerritoryMap />);"],"names":["Card","CardHeader","CardBody","__experimentalHeading","Heading","__experimentalText","Text","ToggleControl","SelectControl","useState","branches","fips","CountyCard","countySelection","updateCountySelection","countiesAreActive","counties","length","every","county","active","getCountiesBranch","branch","setActive","setBranch","handleToggleChange","isActive","prevCountySelection","map","handleBranchChange","value","createElement","key","properties","GEOID","level","Name","label","checked","onChange","disabled","options","StateSelector","states","updateStates","state","name","includes","prevStates","filter","prevState","createRoot","useEffect","useRef","TerritoryMap","mapRef","stateData","setStateData","setStates","admin","stateShapes","setStateShapes","stateCounties","setStateCounties","selectedCounties","setSelectedCounties","stateSelectorRoot","document","getElementById","countyCardRoot","console","log","countyId","countyIsInSelection","some","c","setCountySelection","prevSelection","addSingleState","stateToAdd","stateApi","apiBase","fetch","then","response","ok","Error","json","stateJson","turf","combine","layerShape","convex","concavity","stateShape","L","geoJSON","style","color","weight","opacity","fillColor","fillOpacity","onEachFeature","feature","layer","setStyle","stateName","STATEFP","bindTooltip","interactive","on","setClickedCounty","setStateLayerGroups","prevGroups","setCountyLayerGroups","catch","error","removeSingleState","stateToRemove","countyLayers","getLayers","stateLayers","stateFips","stateLayerToRemove","countiesLayerToRemove","removeLayer","processState","operation","stateShapeToRemove","shape","stateCountiesToRemove","prevShapes","prevCounties","current","apiRoute","updateSelectedCounties","isSelected","prevCounty","center","zoom","zoomControl","render","forEach","stateOnMap","shapeNotSelected","addLayer","mapContainer","mapRoot"],"sourceRoot":""}