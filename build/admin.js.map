{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://vos-territory-map/./src/components/CountyCard.js","webpack://vos-territory-map/./src/components/StateSelector.js","webpack://vos-territory-map/./src/components/TerritoryMap.js","webpack://vos-territory-map/external window \"React\"","webpack://vos-territory-map/external window \"ReactDOM\"","webpack://vos-territory-map/external window [\"wp\",\"components\"]","webpack://vos-territory-map/external window [\"wp\",\"element\"]","webpack://vos-territory-map/webpack/bootstrap","webpack://vos-territory-map/webpack/runtime/compat get default export","webpack://vos-territory-map/webpack/runtime/define property getters","webpack://vos-territory-map/webpack/runtime/hasOwnProperty shorthand","webpack://vos-territory-map/webpack/runtime/make namespace object","webpack://vos-territory-map/./src/admin.js"],"sourcesContent":["import {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    __experimentalHeading as Heading,\r\n    __experimentalText as Text,\r\n    ToggleControl,\r\n    SelectControl\r\n} from '@wordpress/components';\r\n\r\nimport { useState } from '@wordpress/element';\r\n\r\nimport branches from '../assets/branches.json';\r\n\r\nexport default function CountyCard({ countySelection, updateCountySelection }) {\r\n\r\n    const countiesAreActive = (counties) => {\r\n\r\n        if (counties.length) {\r\n\r\n            return counties.every((county) => county.active);\r\n\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const getCountiesBranch = (counties) => {\r\n\r\n        // if counties.length is truthy, and all counties have the same branch, return that branch\r\n        // otherwise, return 'default'\r\n\r\n        if (counties.length && counties.every((county) => county.branch === counties[0].branch)) {\r\n\r\n            return counties[0].branch;\r\n\r\n        }\r\n\r\n        return '';\r\n\r\n    };\r\n\r\n    const [active, setActive] = useState(countiesAreActive(countySelection));\r\n    const [branch, setBranch] = useState(getCountiesBranch(countySelection));    \r\n\r\n    const handleToggleChange = () => {\r\n\r\n        setActive(prevActive => !prevActive);\r\n\r\n        updateCountySelection((prevCountySelection) => {\r\n                \r\n            return prevCountySelection.map((county) => {\r\n\r\n                return {\r\n                    ...county,\r\n                    active: !prevActive,\r\n                };\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    const handleBranchChange = (branch) => {\r\n\r\n        setBranch(branch);\r\n\r\n        updateCountySelection((prevCountySelection) => {\r\n                \r\n            return prevCountySelection.map((county) => {\r\n\r\n                return {\r\n                    ...county,\r\n                    branch: branch,\r\n                };\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                {\r\n                    countySelection.length ? \r\n                        (\r\n                            countySelection.map((county) => (\r\n                                <Heading key={county.fips} level={2}>{county.name}</Heading>\r\n                            ))\r\n                        ) : (\r\n                            <Heading level={2}>Select A County</Heading>\r\n                        )\r\n                }\r\n            </CardHeader>\r\n            <CardBody>\r\n                <ToggleControl\r\n                    label=\"Activate County\"\r\n                    checked={active}\r\n                    onChange={handleToggleChange}\r\n                />\r\n                <SelectControl\r\n                    label=\"Select Branch\"\r\n                    disabled={!active}\r\n                    value={branch}\r\n                    options={branches}\r\n                    onChange={handleBranchChange}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n\r\n}","import {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    ToggleControl,\r\n    __experimentalHeading as Heading\r\n} from '@wordpress/components';\r\n\r\nimport fips from '../assets/fips.json';\r\n\r\nexport default function StateSelector({ states, updateStates }) {\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <Heading level={2}>States</Heading>\r\n            </CardHeader>\r\n            <CardBody>\r\n                {fips.map((state) => (\r\n                    <ToggleControl\r\n                        key={state.fips}\r\n                        label={state.name}\r\n                        checked={states.some((selectedState) => selectedState.fips === state.fips)}\r\n                        onChange={(checked) => {\r\n                            if (checked) {\r\n                                updateStates((prevStates) => [...prevStates, state]);\r\n                            } else {\r\n                                updateStates((prevStates) => prevStates.filter((prevState) => prevState.fips !== state.fips));\r\n                            }\r\n                        }}\r\n                    />\r\n                ))}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}","/**\r\n * External dependencies\r\n */\r\nimport { createRoot } from 'react-dom';\r\n\r\n/**\r\n * WordPress dependencies\r\n */\r\nimport {\r\n    useState,\r\n    useEffect,\r\n    useRef,\r\n} from '@wordpress/element';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport StateSelector from './StateSelector';\r\nimport CountyCard from './CountyCard';\r\n\r\nexport default function TerritoryMap() {\r\n\r\n    const mapRef = useRef();\r\n    // state layers\r\n    const [states, setStates] = useState(admin.states !== '' ? admin.states : []);\r\n    const [stateLayers, setStateLayers] = useState(L.layerGroup());\r\n    // county layers\r\n    const [counties, setCounties] = useState(admin.counties !== '' ? admin.counties : []);\r\n    const [countyLayers, setCountyLayers] = useState(L.layerGroup());\r\n    // county selection\r\n    const [countySelection, setCountySelection] = useState([]);\r\n    // root elements\r\n    const stateSelectorRoot = createRoot(document.getElementById('state-selector'));\r\n    const countyCardRoot = createRoot(document.getElementById('county-card'));\r\n\r\n    const addInitialStates = () => {\r\n\r\n        if (states.length) {\r\n\r\n            states.forEach((state) => {\r\n\r\n                const stateLayer = L.geoJSON(\r\n                    state,\r\n                    {\r\n                        style: {\r\n                            color: '#0a1944',\r\n                            weight: 1,\r\n                            opacity: 1,\r\n                            fillColor: 'transparent',\r\n                            fillOpacity: 0,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                setStateLayers((prevStateLayers) => prevStateLayers.addLayer(stateLayer))\r\n\r\n            });\r\n\r\n            stateLayers.addTo(mapRef.current);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const addInitialCounties = () => {\r\n\r\n        if (counties.length) {\r\n\r\n            counties.forEach((county) => {\r\n\r\n                const countyLayer = L.geoJSON(\r\n                    county,\r\n                    {\r\n                        style: {\r\n                            color: '#0a1944',\r\n                            weight: 1,\r\n                            opacity: 1,\r\n                            fillColor: 'transparent',\r\n                            fillOpacity: 0,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                setCountyLayers((prevCountyLayers) => prevCountyLayers.addLayer(countyLayer))\r\n\r\n            });\r\n\r\n            countyLayers.addTo(mapRef.current);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const addStates = (statesToAdd) => {\r\n\r\n        if (statesToAdd.length) {\r\n\r\n            statesToAdd.forEach((state) => {\r\n\r\n                const stateJson = admin.apiBaseUrl + 'state/' + state + '.json';\r\n\r\n                // fetch api response from stateJson\r\n\r\n                console.log(\"stateJson\", stateJson);\r\n\r\n                const stateLayer = L.geoJSON(\r\n                    stateJson,\r\n                    {\r\n                        style: {\r\n                            color: '#0a1944',\r\n                            weight: 1,\r\n                            opacity: 1,\r\n                            fillColor: 'transparent',\r\n                            fillOpacity: 0,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                setStateLayers((prevStateLayers) => prevStateLayers.addLayer(stateLayer))\r\n\r\n            });\r\n\r\n            stateLayers.addTo(mapRef.current);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const removeStates = (statesToRemove) => {\r\n\r\n        if (statesToRemove.length) {\r\n\r\n            statesToRemove.forEach((state) => {\r\n\r\n                const stateLayer = stateLayers.getLayers().filter((layer) => layer.feature.properties.STATE === state)[0];\r\n\r\n                stateLayers.removeLayer(stateLayer);\r\n\r\n            });\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const addCounties = (countiesToAdd) => {\r\n\r\n        if (countiesToAdd.length) {\r\n\r\n            countiesToAdd.forEach((county) => {\r\n\r\n                const countyLayer = L.geoJSON(\r\n                    county,\r\n                    {\r\n                        style: {\r\n                            color: '#0a1944',\r\n                            weight: 1,\r\n                            opacity: 1,\r\n                            fillColor: 'transparent',\r\n                            fillOpacity: 0,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                setCountyLayers((prevCountyLayers) => prevCountyLayers.addLayer(countyLayer))\r\n\r\n            });\r\n\r\n            countyLayers.addTo(mapRef.current);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const removeCounties = (countiesToRemove) => {\r\n\r\n        if (countiesToRemove.length) {\r\n\r\n            countiesToRemove.forEach((county) => {\r\n\r\n                const countyLayer = countyLayers.getLayers().filter((layer) => layer.feature.properties.GEOID === county)[0];\r\n\r\n                countyLayers.removeLayer(countyLayer);\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        mapRef.current = L.map(\r\n            'afc-territory-map',\r\n            {\r\n                center: [39.8283, -98.5795],\r\n                zoom: 4,\r\n                zoomControl: false,\r\n            }\r\n        );\r\n\r\n        addInitialStates();\r\n        addInitialCounties();\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        stateSelectorRoot.render(<StateSelector states={states} updateStates={setStates} />);\r\n\r\n        if (states) {\r\n\r\n            console.log(\"states\", states);\r\n\r\n            const stateFips = states.map((state) => state.fips);\r\n\r\n            const stateLayersFips = stateLayers.getLayers().map((layer) => layer.feature.properties.STATE);\r\n\r\n            const statesToAdd = stateFips.filter((fips) => !stateLayersFips.includes(fips));\r\n\r\n            const statesToRemove = stateLayersFips.filter((fips) => !stateFips.includes(fips));\r\n\r\n            addStates(statesToAdd);\r\n            removeStates(statesToRemove);\r\n\r\n        }\r\n\r\n    }, [states]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (counties) {\r\n\r\n            const geoids = counties.map((county) => county.properties.GEOID);\r\n\r\n            const countyLayersGeoids = countyLayers.getLayers().map((layer) => layer.feature.properties.GEOID);\r\n\r\n            const countiesToAdd = geoids.filter((geoid) => !countyLayersGeoids.includes(geoid));\r\n\r\n            const countiesToRemove = countyLayersGeoids.filter((geoid) => !geoids.includes(geoid));\r\n\r\n            addCounties(countiesToAdd);\r\n            removeCounties(countiesToRemove);\r\n\r\n        }\r\n\r\n    }, [counties]);\r\n\r\n    useEffect(() => {\r\n\r\n        setCounties((prevCounties) => {\r\n\r\n            return prevCounties.map((county) => {\r\n\r\n                const countySelectionCounty = countySelection.filter((selectionCounty) => selectionCounty.fips === county.properties.GEOID)[0];\r\n\r\n                if (countySelectionCounty) {\r\n\r\n                    return {\r\n                        ...county,\r\n                        branch: countySelectionCounty.branch,\r\n                    };\r\n\r\n                }\r\n\r\n                return county;\r\n\r\n            });\r\n\r\n        });\r\n        \r\n        countyCardRoot.render(<CountyCard countySelection={countySelection} updateCountySelection={setCountySelection} />);\r\n\r\n    }, [countySelection]);\r\n}","module.exports = window[\"React\"];","module.exports = window[\"ReactDOM\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { createRoot } from 'react-dom';\r\nimport TerritoryMap from './components/TerritoryMap';\r\n\r\nconst mapContainer = document.getElementById('afc-territory-map');\r\nconst mapRoot = createRoot(mapContainer);\r\nmapRoot.render(<TerritoryMap />);"],"names":["Card","CardHeader","CardBody","__experimentalHeading","Heading","__experimentalText","Text","ToggleControl","SelectControl","useState","branches","CountyCard","countySelection","updateCountySelection","countiesAreActive","counties","length","every","county","active","getCountiesBranch","branch","setActive","setBranch","handleToggleChange","prevActive","prevCountySelection","map","handleBranchChange","createElement","key","fips","level","name","label","checked","onChange","disabled","value","options","StateSelector","states","updateStates","state","some","selectedState","prevStates","filter","prevState","createRoot","useEffect","useRef","TerritoryMap","mapRef","setStates","admin","stateLayers","setStateLayers","L","layerGroup","setCounties","countyLayers","setCountyLayers","setCountySelection","stateSelectorRoot","document","getElementById","countyCardRoot","addInitialStates","forEach","stateLayer","geoJSON","style","color","weight","opacity","fillColor","fillOpacity","prevStateLayers","addLayer","addTo","current","addInitialCounties","countyLayer","prevCountyLayers","addStates","statesToAdd","stateJson","apiBaseUrl","console","log","removeStates","statesToRemove","getLayers","layer","feature","properties","STATE","removeLayer","addCounties","countiesToAdd","removeCounties","countiesToRemove","GEOID","center","zoom","zoomControl","render","stateFips","stateLayersFips","includes","geoids","countyLayersGeoids","geoid","prevCounties","countySelectionCounty","selectionCounty","mapContainer","mapRoot"],"sourceRoot":""}